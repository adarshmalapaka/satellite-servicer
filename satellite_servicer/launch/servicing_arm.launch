<!-- Every launch file starts with this command -->
<launch> 

    <!-- https://answers.gazebosim.org//question/5468/gazebo_ros_pkgs-no-p-gain-specified-for-pid-in-positionjointinterface/ -->
    <!-- <rosparam file="$(find satellite_servicer)/config/gazebo_ros_control_params.yaml" command="load"/> -->

    <!-- Include helps you launch other launch files within this launch file-->
        <!-- For file tag, mention the gazebo_ros empty world's launch file -->
        <!-- For the arg name, give any name of your choice to this world -->
        <!-- for the value tag, provide the path to the world file that you downloaded -->
	<include file= "$(find gazebo_ros)/launch/empty_world.launch"> 
        <arg name="paused" value="True"/>
	</include>
		

        <!-- Defining this param here helps you store all the urdf contents of robot+lidar into a single param name -->
        <!-- fill the command by adding in the path to your .xacro file the $ symbol below -->
        <!--  -->
	<param name= "robot_description" command="$(find xacro)/xacro --inorder $(find satellite_servicer)/urdf/satellite_servicer_integration.urdf.xacro" />
    <!-- Add in your robot name in the value tag -->
    <param name = "my_robot" value="satellite_servicer"/> 
	<arg name ="init_pose" value="-x 0 -y 0 -z 0 -R 0 -P 0 -Y 0"/>
    

    <!-- This command adds the controller variables you defined in the config file into ros's parameter list. Simply add the file name in the file tag -->
	<rosparam file="$(find satellite_servicer)/config/config_controllers.yaml" command="load"/>


	<!-- Node for publishing base footprint -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="True"/>
    </node>


    <node pkg="rosservice" type="rosservice" name="rosservice" args="call /gazebo/reset_simulation"/>
    
    <!-- TF node that gives the static transformation between the world map and the base link of your robot. Change /base_link to the /root link name of your robot -->
    <node pkg="tf" type="static_transform_publisher" name="map_to_base" args="1 0 0 0 0 0 1 /map /dummy_link 10" />


    <!-- Controller spawner: Starts all the defined controllers with their configs. Just add your controller names defined in your config file into the args tag below   -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    	output="screen" ns="/satellite_servicer" args=" joint_state_controller 
                                                 joint1_pos_control 
                                                 joint2_pos_control 
                                                 joint3_pos_control
                                                 joint4_pos_control
                                                 joint5_pos_control
                                                 joint6_pos_control" />


    <!-- A node to publish the robot states onto ros network -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>	


    <!-- A node to spawn the robot into gazebo's world file. Notice that the args has the param robot_description that you previously defined. This is how your robot's spec gets included.-->
   	<node
		name="spawn_model"
		pkg="gazebo_ros"
		type="spawn_model"
		args="$(arg init_pose) -param robot_description -urdf -model satellite_servicer -J joint_1 0.0 -J joint_2 0.0 -J joint_3 -1.0 -J joint_4 1.5708 -J joint_5 0.5 -J joint_6 0.0"
		output="screen"/>

    <!-- args="$(arg init_pose) -param robot_description -urdf -model satellite_servicer -J joint_1 1.5708 -J joint_2 -0.1302 -J joint_3 -0.2343 -J joint_4 0.8939 -J joint_5 0.3732 -J joint_6 0.0" -->   
    <!-- args="$(arg init_pose) -param robot_description -urdf -model satellite_servicer -J joint_1 0.0 -J joint_2 1.5708 -J joint_3 0.0 -J joint_4 0.0 -J joint_5 0.0 -J joint_6 0.0"		 -->
	<!--Default node -->
	<node
    name="fake_joint_calibration"
    pkg="rostopic"
    type="rostopic"
    args="pub /calibrated std_msgs/Bool true" />


</launch>
